"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Button } from "@/components/ui/button";

import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { 
  Package, 
  Star, 
  TrendingUp,
  ShoppingCart,
  Plus,
  Minus
} from "lucide-react";
import { useCartStore } from "../../stores/cart.store";
import { CategoryFilter } from "./category-filter";
import { SearchHeader } from "./search-header";

interface Product {
  id: string;
  name: string;
  code: string;
  description: string;
  imageUrl?: string;
  status: "AVAILABLE" | "IN_USE" | "MAINTENANCE" | "DAMAGED";
  availableQuantity: number;
  totalQuantity: number;
  category: {
    id: string;
    name: string;
    icon: string;
    color: string;
  };
  department: {
    id: string;
    name: string;
  };
  rating?: number;
  borrowCount?: number;
  location?: string;
}

interface Category {
  id: string;
  name: string;
  icon: string;
  color: string;
  productCount: number;
}

export function UserCatalogShoppingView() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { addItem, getItemQuantity, getTotalItems } = useCartStore();

  // State
  const [products, setProducts] = useState<Product[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
  const [selectedCategory, setSelectedCategory] = useState<string>(searchParams.get('category') || '');
  const [showFilters, setShowFilters] = useState(false);

  // Load data
  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    // Update URL when filters change
    const params = new URLSearchParams();
    if (searchTerm) params.set('search', searchTerm);
    if (selectedCategory) params.set('category', selectedCategory);
    
    const newUrl = params.toString() ? `?${params.toString()}` : '/inventory';
    router.replace(newUrl, { scroll: false });
  }, [searchTerm, selectedCategory, router]);

  const loadData = async () => {
    try {
      setLoading(true);
      
      // TODO: Replace with actual API calls
      const mockCategories: Category[] = [
        {
          id: "1",
          name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏™‡∏ï‡∏ó‡∏±‡∏®‡∏ô‡∏π‡∏õ‡∏Å‡∏£‡∏ì‡πå",
          icon: "üìΩÔ∏è",
          color: "bg-blue-100 text-blue-800",
          productCount: 15,
        },
        {
          id: "2", 
          name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
          icon: "üñ®Ô∏è",
          color: "bg-green-100 text-green-800",
          productCount: 12,
        },
        {
          id: "3",
          name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
          icon: "üì∑",
          color: "bg-purple-100 text-purple-800",
          productCount: 8,
        },
        {
          id: "4",
          name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
          icon: "üíª",
          color: "bg-orange-100 text-orange-800",
          productCount: 20,
        },
      ];

      const mockProducts: Product[] = [
        {
          id: "1",
          name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢‡∏†‡∏≤‡∏û Epson EB-X41",
          code: "EP001-2024",
          description: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢‡∏†‡∏≤‡∏û 3LCD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á 3600 ‡∏•‡∏π‡πÄ‡∏°‡∏ô",
          status: "AVAILABLE",
          availableQuantity: 3,
          totalQuantity: 5,
          category: {
            id: "1",
            name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏™‡∏ï‡∏ó‡∏±‡∏®‡∏ô‡∏π‡∏õ‡∏Å‡∏£‡∏ì‡πå",
            icon: "üìΩÔ∏è",
            color: "bg-blue-100 text-blue-800",
          },
          department: {
            id: "1",
            name: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
          },
          rating: 4.8,
          borrowCount: 156,
          location: "‡∏´‡πâ‡∏≠‡∏á 301 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ A",
        },
        {
          id: "2",
          name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå HP LaserJet Pro M404n",
          code: "HP002-2024",
          description: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå 38 ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ",
          status: "AVAILABLE",
          availableQuantity: 2,
          totalQuantity: 3,
          category: {
            id: "2",
            name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô",
            icon: "üñ®Ô∏è",
            color: "bg-green-100 text-green-800",
          },
          department: {
            id: "2",
            name: "‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
          },
          rating: 4.6,
          borrowCount: 134,
          location: "‡∏´‡πâ‡∏≠‡∏á 205 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ B",
        },
        {
          id: "3",
          name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ Canon EOS 2000D",
          code: "CN003-2024",
          description: "‡∏Å‡∏•‡πâ‡∏≠‡∏á DSLR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå APS-C 24.1 MP",
          status: "IN_USE",
          availableQuantity: 0,
          totalQuantity: 2,
          category: {
            id: "3",
            name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û",
            icon: "üì∑",
            color: "bg-purple-100 text-purple-800",
          },
          department: {
            id: "3",
            name: "‡∏Ñ‡∏ì‡∏∞‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå",
          },
          rating: 4.9,
          borrowCount: 89,
          location: "‡∏´‡πâ‡∏≠‡∏á 102 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ C",
        },
        {
          id: "4",
          name: "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ Lenovo ThinkPad E14",
          code: "LN004-2024",
          description: "‡πÅ‡∏•‡πá‡∏õ‡∏ó‡πá‡∏≠‡∏õ Intel Core i5 RAM 8GB SSD 256GB",
          status: "AVAILABLE",
          availableQuantity: 5,
          totalQuantity: 8,
          category: {
            id: "4",
            name: "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
            icon: "üíª",
            color: "bg-orange-100 text-orange-800",
          },
          department: {
            id: "4",
            name: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®",
          },
          rating: 4.7,
          borrowCount: 201,
          location: "‡∏´‡πâ‡∏≠‡∏á 401 ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ D",
        },
      ];

      setCategories(mockCategories);
      setProducts(mockProducts);
    } catch (error) {
      console.error("Failed to load data:", error);
    } finally {
      setLoading(false);
    }
  };

  // Filter products
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.code.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = !selectedCategory || product.category.id === selectedCategory;
    
    return matchesSearch && matchesCategory;
  });

  // Get status display
  const getStatusColor = (status: string) => {
    switch (status) {
      case "AVAILABLE": return "bg-green-100 text-green-800";
      case "IN_USE": return "bg-blue-100 text-blue-800";
      case "MAINTENANCE": return "bg-yellow-100 text-yellow-800";
      case "DAMAGED": return "bg-red-100 text-red-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "AVAILABLE": return "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
      case "IN_USE": return "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
      case "MAINTENANCE": return "‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á";
      case "DAMAGED": return "‡∏ä‡∏≥‡∏£‡∏∏‡∏î";
      default: return status;
    }
  };

  // Cart functions
  const handleAddToCart = (product: Product) => {
    if (product.status === "AVAILABLE" && product.availableQuantity > 0) {
      addItem(product.id, product.name, 1);
    }
  };

  const handleQuantityChange = (product: Product, change: number) => {
    const currentQuantity = getItemQuantity(product.id);
    const newQuantity = currentQuantity + change;
    
    if (newQuantity <= 0) {
      // Remove from cart logic will be handled by the store
      return;
    }
    
    if (newQuantity <= product.availableQuantity) {
      if (change > 0) {
        addItem(product.id, product.name, change);
      }
      // For decrease, we'll need to implement updateQuantity in store
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="sticky top-0 z-50 bg-white border-b p-4">
          <div className="h-10 bg-gray-200 rounded animate-pulse" />
        </div>
        <div className="p-4 space-y-4">
          {[...Array(6)].map((_, i) => (
            <div key={i} className="h-32 bg-gray-200 rounded-lg animate-pulse" />
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with Search */}
      <SearchHeader
        searchTerm={searchTerm}
        onSearchChange={setSearchTerm}
        onBack={() => router.back()}
        onToggleFilters={() => setShowFilters(!showFilters)}
        showFilters={showFilters}
      />

      {/* Category Filter */}
      {showFilters && (
        <CategoryFilter
          categories={categories}
          selectedCategory={selectedCategory}
          onCategoryChange={setSelectedCategory}
        />
      )}

      {/* Content */}
      <div className="p-4 space-y-4">
        {/* Results Header */}
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-lg font-semibold text-gray-900">
              {searchTerm ? `‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "${searchTerm}"` : 
               selectedCategory ? categories.find(c => c.id === selectedCategory)?.name : 
               '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'}
            </h2>
            <p className="text-sm text-gray-600">
              ‡∏û‡∏ö {filteredProducts.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </p>
          </div>
          
          {getTotalItems() > 0 && (
            <Button
              onClick={() => router.push('/mobile/cart')}
              className="bg-ku-green hover:bg-ku-green-dark relative"
            >
              <ShoppingCart className="w-4 h-4 mr-2" />
              ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
              <Badge
                variant="secondary"
                className="ml-2 bg-white text-ku-green"
              >
                {getTotalItems()}
              </Badge>
            </Button>
          )}
        </div>

        {/* Products Grid */}
        <div className="space-y-3">
          {filteredProducts.length === 0 ? (
            <Card>
              <CardContent className="p-12 text-center">
                <Package className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
                </h3>
                <p className="text-gray-600 mb-4">
                  ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
                </p>
                <Button
                  variant="outline"
                  onClick={() => {
                    setSearchTerm('');
                    setSelectedCategory('');
                  }}
                >
                  ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
                </Button>
              </CardContent>
            </Card>
          ) : (
            filteredProducts.map((product) => {
              const inCartQuantity = getItemQuantity(product.id);
              const canAddMore = inCartQuantity < product.availableQuantity;
              
              return (
                <Card key={product.id} className="hover:shadow-md transition-shadow">
                  <CardContent className="p-4">
                    <div className="flex space-x-4">
                      {/* Product Image */}
                      <div className="w-20 h-20 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">
                          {product.category.icon}
                        </span>
                      </div>
                      
                      {/* Product Info */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between mb-2">
                          <div className="flex-1">
                            <h3 className="font-medium text-gray-900 truncate">
                              {product.name}
                            </h3>
                            <p className="text-sm text-gray-600">
                              {product.code}
                            </p>
                          </div>
                          <Badge className={`ml-2 ${getStatusColor(product.status)}`}>
                            {getStatusText(product.status)}
                          </Badge>
                        </div>
                        
                        <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                          {product.description}
                        </p>
                        
                        {/* Stats */}
                        <div className="flex items-center space-x-4 mb-3">
                          <div className="flex items-center text-xs text-gray-500">
                            <Star className="w-3 h-3 text-yellow-400 fill-current mr-1" />
                            {product.rating?.toFixed(1)}
                          </div>
                          
                          <div className="flex items-center text-xs text-gray-500">
                            <TrendingUp className="w-3 h-3 mr-1" />
                            {product.borrowCount} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                          </div>
                          
                          <div className="flex items-center text-xs text-gray-500">
                            <Package className="w-3 h-3 mr-1" />
                            ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {product.availableQuantity}/{product.totalQuantity}
                          </div>
                        </div>
                        
                        {/* Location */}
                        {product.location && (
                          <p className="text-xs text-gray-500 mb-3">
                            üìç {product.location}
                          </p>
                        )}
                        
                        {/* Add to Cart */}
                        <div className="flex items-center space-x-2">
                          {inCartQuantity === 0 ? (
                            <Button
                              onClick={() => handleAddToCart(product)}
                              disabled={product.status !== "AVAILABLE" || product.availableQuantity === 0}
                              className="bg-ku-green hover:bg-ku-green-dark flex-1"
                              size="sm"
                            >
                              <Plus className="w-4 h-4 mr-2" />
                              ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                            </Button>
                          ) : (
                            <div className="flex items-center space-x-2 flex-1">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleQuantityChange(product, -1)}
                                className="w-8 h-8 p-0"
                              >
                                <Minus className="w-4 h-4" />
                              </Button>
                              
                              <div className="flex-1 text-center">
                                <span className="text-sm font-medium">
                                  ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤: {inCartQuantity}
                                </span>
                              </div>
                              
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleQuantityChange(product, 1)}
                                disabled={!canAddMore}
                                className="w-8 h-8 p-0"
                              >
                                <Plus className="w-4 h-4" />
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
}