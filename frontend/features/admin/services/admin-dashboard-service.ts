// features/admin/services/admin-dashboard-service.ts

import {
  AdminStats,
  RecentActivity,
  UserManagementData,
  SystemStats,
} from "@/types/admin-dashboard";
import { getSession } from "next-auth/react";

export class AdminDashboardService {
  private static baseUrl = process.env.NEXT_PUBLIC_BACKEND_URL;

  // ‚≠ê 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
  private static async getAuthHeaders(): Promise<Record<string, string>> {
    const session = await getSession();

    const headers: Record<string, string> = {
      "Content-Type": "application/json",
    };

    // ‡πÉ‡∏ä‡πâ if statement ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ TypeScript ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å session.accessToken ‡πÅ‡∏•‡πâ‡∏ß
    if (session?.accessToken) {
      headers.Authorization = `Bearer ${session.accessToken}`;
    } else {
      console.warn(
        "Access token not found directly on session. Check NextAuth setup."
      );
    }

    return headers;
  }

  // ‚≠ê 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô

  static async getAdminStats(): Promise<AdminStats> {
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${this.baseUrl}/api/v1/admin/stats`, {
        headers,
        credentials: "include",
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: Failed to fetch admin stats`);
      }

      const responseData = await response.json();

      // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° debug logs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Backend
      console.log("üîç Raw response from backend:", responseData);
      console.log("üîç Response structure check:");
      console.log("  - Has 'data' key:", !!responseData.data);
      console.log("  - Direct data:", responseData);

      // Backend ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö { "success": true, "data": {...} }
      const statsData = responseData.data || responseData;

      console.log("üîç Final stats data:", statsData);
      console.log("üîç Stats data keys:", Object.keys(statsData));

      // ‚≠ê ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field mapping
      const mappedStats: AdminStats = {
        totalUsers: statsData.total_users || 0,
        totalProducts: statsData.total_products || 0,
        totalDepartments: statsData.total_departments || 0,
        pendingRequests: statsData.pending_requests || 0,
        approvedRequests: statsData.approved_requests || 0,
        rejectedRequests: statsData.rejected_requests || 0,
        completedRequests: statsData.completed_requests || 0,
        monthlyRequests: statsData.monthly_requests || 0,
        activeUsers: statsData.active_users || 0,
        lowStockProducts: statsData.low_stock_products || 0,
      };

      console.log("üéØ Mapped stats:", mappedStats);
      return mappedStats;
    } catch (error) {
      console.error("Error fetching admin stats:", error);
      // ‚≠ê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô mock data ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Backend
      const mockStats = {
        totalUsers: 888,
        totalProducts: 888,
        totalDepartments: 888,
        pendingRequests: 888,
        approvedRequests: 888,
        rejectedRequests: 888,
        completedRequests: 888,
        monthlyRequests: 888,
        activeUsers: 888,
        lowStockProducts: 888,
      };
      console.log("üîÑ Using mock data:", mockStats);
      return mockStats;
    }
  }

  static async getRecentActivity(limit = 10): Promise<RecentActivity[]> {
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(
        `${this.baseUrl}/api/v1/admin/activity?limit=${limit}`,
        { headers, credentials: "include" }
      );

      if (!response.ok) {
        throw new Error(
          `Failed to fetch recent activity: ${response.statusText}`
        );
      }

      const responseData = await response.json();

      // ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Array: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏à‡∏£‡∏¥‡∏á‡πÜ
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Array ‡∏ß‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Component ‡∏û‡∏±‡∏á
      if (responseData && Array.isArray(responseData.data)) {
        return responseData.data;
      }

      console.warn(
        "Received unexpected data structure for recent activity:",
        responseData
      );
      return []; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠
    } catch (error) {
      console.error("Error fetching recent activity:", error);
      return []; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Error
    }
  }

  static async getSystemStats(): Promise<SystemStats> {
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(
        `${this.baseUrl}/api/v1/admin/system-stats`,
        {
          headers,
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error("Failed to fetch system stats");
      }

      const responseData = await response.json();
      // ‡πÉ‡∏ä‡πâ‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö getAdminStats
      return responseData.data || responseData;
    } catch (error) {
      console.error("Error fetching system stats:", error);
      return this.getMockSystemStats();
    }
  }

  static async getUsersForManagement(
    page = 1,
    limit = 10
  ): Promise<{ users: UserManagementData[]; total: number }> {
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(
        `${this.baseUrl}/api/v1/admin/users?page=${page}&limit=${limit}`,
        { headers, credentials: "include" }
      );
      if (!response.ok) throw new Error("Failed to fetch users");

      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: Endpoint ‡∏ô‡∏µ‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏à‡∏∞ return data ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏´‡πà‡∏≠‡πÉ‡∏ô 'data' key
      // ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏ó‡∏µ‡πà Backend ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Endpoint ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
      const responseData = await response.json();
      return responseData.data; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ Backend ‡∏ñ‡∏π‡∏Å‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏´‡πà‡∏≠‡πÉ‡∏ô data key ‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error("Error fetching users:", error);
      return { users: this.getMockUsers(), total: 50 };
    }
  }

  static async updateUserStatus(
    userId: string,
    status: "ACTIVE" | "INACTIVE"
  ): Promise<void> {
    const headers = await this.getAuthHeaders();
    const response = await fetch(
      `${this.baseUrl}/api/v1/admin/users/${userId}/status`,
      {
        method: "PATCH",
        headers: {
          ...headers,
        },
        body: JSON.stringify({ status }),
      }
    );
    if (!response.ok) throw new Error("Failed to update user status");
  }

  static async updateUserRole(
    userId: string,
    role: "USER" | "APPROVER" | "ADMIN"
  ): Promise<void> {
    const headers = await this.getAuthHeaders();
    const response = await fetch(
      `${this.baseUrl}/api/v1/admin/users/${userId}/role`,
      {
        method: "PATCH",
        headers: {
          ...headers,
        },
        body: JSON.stringify({ role }),
      }
    );
    if (!response.ok) throw new Error("Failed to update user role");
  }

  private static getMockStats(): AdminStats {
    return {
      totalUsers: 89,
      totalProducts: 156,
      totalDepartments: 15,
      pendingRequests: 12,
      approvedRequests: 45,
      rejectedRequests: 3,
      completedRequests: 89,
      monthlyRequests: 28,
      activeUsers: 67,
      lowStockProducts: 8,
    };
  }

  private static getMockActivity(): RecentActivity[] {
    return [
      {
        id: "1",
        type: "REQUEST",
        user: {
          id: "1",
          name: "‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
          email: "somchai@ku.ac.th",
          department: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£",
        },
        item: { id: "1", name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢‡∏†‡∏≤‡∏û Epson" },
        message: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢‡∏†‡∏≤‡∏û Epson",
        timestamp: new Date().toISOString(),
      },
    ];
  }

  private static getMockSystemStats(): SystemStats {
    return {
      requestsByMonth: [
        { month: "2024-10", count: 25 },
        { month: "2024-11", count: 30 },
        { month: "2024-12", count: 28 },
        { month: "2025-01", count: 35 },
      ],
      topRequestedItems: [
        { name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏â‡∏≤‡∏¢‡∏†‡∏≤‡∏û Epson", count: 15 },
        { name: "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå HP LaserJet", count: 12 },
        { name: "‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏î‡∏¥‡∏à‡∏¥‡∏ï‡∏≠‡∏• Canon", count: 8 },
        { name: "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏£‡∏µ‡πÄ‡∏ã‡∏ô‡πÄ‡∏ï‡∏ä‡∏±‡πà‡∏ô", count: 6 },
      ],
      departmentUsage: [
        { department: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£", count: 20 },
        { department: "‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°", count: 15 },
        { department: "‡∏Ñ‡∏ì‡∏∞‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", count: 12 },
        { department: "‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", count: 8 },
      ],
      requestsByStatus: [
        { status: "PENDING", count: 12 },
        { status: "APPROVED", count: 45 },
        { status: "REJECTED", count: 3 },
        { status: "COMPLETED", count: 89 },
      ],
    };
  }

  private static getMockUsers(): UserManagementData[] {
    return [
      {
        id: "1",
        name: "‡∏ô‡∏≤‡∏¢ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ",
        email: "somchai@ku.ac.th",
        role: "USER",
        department: { id: "1", name: "‡∏Ñ‡∏ì‡∏∞‡πÄ‡∏Å‡∏©‡∏ï‡∏£" },
        status: "ACTIVE",
        lastLogin: new Date().toISOString(),
        createdAt: new Date().toISOString(),
        requestCount: 5,
      },
    ];
  }
}
